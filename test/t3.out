
---- string and symbol pointer comparison ----
("Hello" "Hello" #t)
("Hello" "Hello" #f)
("Hello" "Hello" #f)
(Hello Hello #t)
(Hello Hello #t)
(Hello Hello #t)
(Hello Hello2 #f)

---- invalid evaluation rules ----
> #<parse-error "InvalidDottedList" 9>
ERR: ill-formed expression: #<parse-error "InvalidDottedList" 9>

---- literals ----
> 1233
Int64: 1233
> "1233"
String: "1233"
> #t
Boolean: #t
> #!void
Void: #!void

---- variable reference ----
> +
NativeProcedure: #<native-procedure +>
> q
ERR: variable not bound: q

---- calls ----
> (+)
Int64: 0
> (+ 19)
Int64: 19
> (+ 10 20)
Int64: 30
> (- 10 20)
Int64: -10
> (- 10 20 -5)
Int64: -5
> (+ 10 3 4)
Int64: 17
> (+ (+ 10 3) 4)
Int64: 17
> (+ (* 10 3) 4)
Int64: 34
> 'x
Symbol: x
> 'y
Symbol: y
> ''x
Pair: 'x
> (cons 12 (cons 13 '()))
Pair: (12 13)
> (length (cons 12 (cons 13 '())))
Int64: 2
> (length '())
Int64: 0
> (length '(1 89 3))
Int64: 3
> (length 1 89 3)
ERR: length needs 1 argument

---- list ----
> (list)
Null: ()
> (list 14)
Pair: (14)
> (list 12 13 14)
Pair: (12 13 14)
> (length "hello")
ERR: not a list: "hello"
> (length (list 12 13 14))
Int64: 3
> (reverse (list 12 13 14))
Pair: (14 13 12)
> (cons (+ ((car (cons * +)) (+ 10 1) (- 3 2)) 4) 'hey)
Pair: (15 . hey)
> (cons (car 13) ())
ERR: not a pair: 13
> (car 4 5)
ERR: car needs 1 argument
> (car)
ERR: car needs 1 argument
> (cdr (cons 3 6))
Int64: 6
> (cdr)
ERR: cdr needs 1 argument
> (cons 10 (list 11 12 '()))
Pair: (10 11 12 ())

---- arithmetic ----
> (+ 10 'a)
ERR: not a number: a
> (+ 10 "a")
ERR: not a number: "a"
> (-10)
ERR: not a function: -10
> (- 10)
Int64: -10
> (- 10 . 33)
ERR: improper list: 33
> (-)
ERR: -: wrong number of arguments
> (quotient 10 3)
Int64: 3
> (quotient -10 3)
Int64: -3
> (quotient 30)
Int64: 0
> (remainder 30)
Int64: 1
> (remainder -10 3)
Int64: -1
> (modulo -10 3)
Int64: 2
> (/ 10 3)
Fractional64: 10/3
> (integer./ 10 3)
Fractional64: 10/3
> (double./ 10 3)
ERR: not a double: 10
> (double./ 10. 3.)
Double: 3.33333333333333

---- arithmetic r5rs tests ----
> (modulo 13 4)
Int64: 1
> (remainder 13 4)
Int64: 1
> (modulo -13 4)
Int64: 3
> (remainder -13 4)
Int64: -1
> (modulo 13 -4)
Int64: -3
> (remainder 13 -4)
Int64: 1
> (modulo -13 -4)
Int64: -1
> (remainder -13 -4)
Int64: -1

---- number tower ----
> (+ 5 2/3)
Fractional64: 17/3
> (+ 100 1/2)
Fractional64: 201/2
> (+ 1/2 100)
Fractional64: 201/2
> (+ 5/4 2/3)
Fractional64: 23/12
> (+ 1/6 1/3)
Fractional64: 1/2
> (+ 5/6 1/3)
Fractional64: 7/6
> (+ 1/4 0.5)
Double: 0.75
> (+ 0.5 1/4)
Double: 0.75
> (- 1/4 0.5)
Double: -0.25
> (- 0.5 1/4)
Double: 0.25
> (- 100)
Int64: -100
> (+ 100)
Int64: 100
> (- 3/4)
Fractional64: -3/4
> (+ 3/4)
Fractional64: 3/4
> (- 100.)
Double: -100.
> (+ 100.)
Double: 100.
> (* 100)
Int64: 100
> (/ 100)
Fractional64: 1/100
> (* 3/4)
Fractional64: 3/4
> (/ 3/4)
Fractional64: 4/3
> (* 100.)
Double: 100.
> (/ 100.)
Double: 0.01
> (+ 2.25 0.5)
Double: 2.75
> (- 2.25 0.5)
Double: 1.75
> (* 2.25 0.5)
Double: 1.125
> (/ 2.25 0.5)
Double: 4.5
> (* 1/4 2/3)
Fractional64: 1/6
> (* 1/4 2/3 5)
Fractional64: 5/6
> (* 1/4 2/3 5 2.)
Double: 1.66666666666667
> (/ 1/4 2/3)
Fractional64: 3/8
> (/ 3/4 2)
Fractional64: 3/8
> (/ 2 3/4)
Fractional64: 8/3

---- more fractionals ----
> (/ 5)
Fractional64: 1/5
> (/ 5/0)
ERR: variable not bound: 5/0
> (/ 1/5)
Int64: 5
> (/ 1/9223372036854775807 2)
ERR: #<int64-underflow-error (* 9223372036854775807 2)>
> (* 1/9223372036854775807 2)
Fractional64: 2/9223372036854775807
> (/ 1/9223372036854775807 3/2)
ERR: #<int64-underflow-error (* 9223372036854775807 3)>
> (* 2 1/9223372036854775807)
Fractional64: 2/9223372036854775807
> (* 1/2 1/9223372036854775807)
ERR: #<int64-underflow-error (* 2 9223372036854775807)>
> (* 1/9223372036854775807 1/2)
ERR: #<int64-underflow-error (* 9223372036854775807 2)>
> (- 1/9223372036854775807 0)
Fractional64: 1/9223372036854775807
> (- 0 1/9223372036854775807)
Fractional64: -1/9223372036854775807
> (- 1 1/9223372036854775807)
Fractional64: 9223372036854775806/9223372036854775807

---- exact->inexact ----
> (exact->inexact 3)
Double: 3.
> (exact->inexact 0.3)
Double: 0.3
> (exact->inexact 3/2)
Double: 1.5

---- invalid ----
> ()
ERR: empty call
> (+ 10 . 20)
ERR: improper list: 20
> (+ . 10)
ERR: improper list: 10
> (10 20)
ERR: not a function: 10

---- chars ----
> #\@
Char: #\@
> (char->integer (string-ref "@" 0))
Int64: 64
> (string->list "Hello\0 World\b\a\f\t\r\n")
Pair: (#\H #\e #\l #\l #\o #\nul #\space #\W #\o #\r #\l #\d #\backspace #\alarm #\page #\tab #\return #\newline)
> (list #\f #\esc #\return #\xff #\ufffe #\U0001effe)
Pair: (#\f #\esc #\return #\xff #\ufffe #\U0001effe)
> (list->string (list #\f #\esc #\return #\p))
String: "f\33\rp"
> (list->string (list #\f #\esc #\return #\xff #\ufffe #\U0001effe))
String: "f\33\r\377\ufffe\U0001effe"
> (string->list "f\33\r\377\ufffe\U0001effe")
Pair: (#\f #\esc #\return #\xff #\ufffe #\U0001effe)
> (char->integer #\xef)
Int64: 239
> #\xef
Char: #\xef
> (char->integer #\uffff)
Int64: 65535
> #<parse-error "InvalidCharname" 18>
ERR: ill-formed expression: #<parse-error "InvalidCharname" 18>
> (char->integer #\ufffe)
Int64: 65534
> (char->integer #\Uffffffff)
Int64: 4294967295
> (char->integer #\Uffffffff)
Int64: 4294967295
> (char->integer #\U000fffff)
Int64: 1048575
> #<parse-error "InvalidCharname" 18>
ERR: ill-formed expression: #<parse-error "InvalidCharname" 18>
> (string->list "a\33b")
Pair: (#\a #\esc #\b)
> (map char->integer (string->list "\n"))
Pair: (10)
> (map char->integer (string->list "\377"))
Pair: (255)
> (map char->integer (string->list "\378"))
Pair: (31 56)
> (map char->integer (string->list "'7"))
Pair: (39 55)
> (string-ref "\377\177" 0)
Char: #\xff
> (string-ref "\377\177" 1)
Char: #\delete
> "\377"
String: "\377"

---- strings ----
> (string-append "a" "b c" "d")
String: "ab cd"
> (string-append "a")
String: "a"
> (string-append)
String: ""

---- stdlib ----
> (list? (list "foo"))
Boolean: #t
> (list? (list))
Boolean: #t
> (list? (cons 1 2))
Boolean: #f
> (list? "foo")
Boolean: #f
> (inc 10)
Int64: 11
> (dec 0)
Int64: -1
> dec
NativeProcedure: #<native-procedure dec>
> inc
NativeProcedure: #<native-procedure inc>
> (fold-right inc (list 10 11 13))
ERR: fold-right needs 3 arguments
> (fold-right inc #f (list 10 11 13))
ERR: inc needs 1 argument
> (fold-right cons #f (list 10 11 13))
Pair: (10 11 13 . #f)
> (map inc (list 10 11 13))
Pair: (11 12 14)
> (improper->proper-map inc (cons 10 (cons 20 30)))
Pair: (11 21 31)
> (improper->proper-map inc 10)
Pair: (11)

---- .code ----
> (.code (cons 10 (cons 20 30)))
Pair: (improper-list 10 20 30)
> (.code (cons 20 30))
Pair: (cons 20 30)
> (.code (cons 20 (list)))
Pair: (list 20)
> (.code (list (list 10) 20))
Pair: (list (list 10) 20)
> (.code cons)
Symbol: cons
